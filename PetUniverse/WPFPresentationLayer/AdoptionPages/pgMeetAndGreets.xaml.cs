using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;

namespace WPFPresentationLayer.AdoptionPages
{
    /// <summary>
    /// NAME: Austin Gee
    /// DATE: 2/17/2020
    /// CHECKED BY: Thomas Dupuy
    /// 
    /// This class is contains the code for the pgMeetAndGreets page
    /// </summary>
    /// <remarks>
    /// UPDATED BY: NA
    /// UPDATE DATE: NA
    /// WHAT WAS CHANGED: NA
    /// 
    /// </remarks>
    public partial class pgMeetAndGreets : Page
    {
        IAdoptionAppointmentManager _adoptionAppointmentManager;
        AdoptionAppointmentVM _adoptionAppointment;

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This is the no-argeument constructor
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        public pgMeetAndGreets()
        {
            InitializeComponent();
            _adoptionAppointmentManager = new AdoptionAppointmentManager();
            populateAppointmentDataGrid();
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This private method populates Appoinments data grid with the appropriate data
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        private void populateAppointmentDataGrid()
        {
            dgAppointments.ItemsSource = _adoptionAppointmentManager.RetrieveAdoptionApplicationsByActiveAndType(true, "Meet and Greet");
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This event handler is fired when the dgAppointments data grid's columns are auto generated.
        /// At this point it formats the data grid to an appropriate, human readable form.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        private void dgAppointments_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgAppointments.Columns.RemoveAt(34);
            dgAppointments.Columns.RemoveAt(33);
            dgAppointments.Columns.RemoveAt(32);
            dgAppointments.Columns.RemoveAt(31);
            dgAppointments.Columns.RemoveAt(29);
            dgAppointments.Columns.RemoveAt(28);
            dgAppointments.Columns.RemoveAt(27);
            dgAppointments.Columns.RemoveAt(26);
            dgAppointments.Columns.RemoveAt(25);
            dgAppointments.Columns.RemoveAt(24);
            dgAppointments.Columns.RemoveAt(23);
            dgAppointments.Columns.RemoveAt(22);
            dgAppointments.Columns.RemoveAt(21);
            dgAppointments.Columns.RemoveAt(20);
            dgAppointments.Columns.RemoveAt(19);
            dgAppointments.Columns.RemoveAt(18);
            dgAppointments.Columns.RemoveAt(17);
            dgAppointments.Columns.RemoveAt(16);
            dgAppointments.Columns.RemoveAt(15);
            dgAppointments.Columns.RemoveAt(10);
            dgAppointments.Columns.RemoveAt(9);
            dgAppointments.Columns.RemoveAt(8);
            dgAppointments.Columns.RemoveAt(7);
            dgAppointments.Columns.RemoveAt(6);
            dgAppointments.Columns.RemoveAt(5);
            //dgAppointments.Columns.RemoveAt(4);
            dgAppointments.Columns.RemoveAt(3);
            dgAppointments.Columns.RemoveAt(2);
            dgAppointments.Columns.RemoveAt(1);
            dgAppointments.Columns.RemoveAt(0);

            dgAppointments.Columns.Move(5, 0);

            dgAppointments.Columns[0].Header = "Appointment Time";
            dgAppointments.Columns[1].Header = "Location Name";
            dgAppointments.Columns[2].Header = "Customer First Name";
            dgAppointments.Columns[3].Header = "Customer Last Name";
            dgAppointments.Columns[4].Header = "Customer Phone Number";
            dgAppointments.Columns[5].Header = "Customer Email";
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This event handler is fired when a row from the dgAppointments is double clicked. It then opens
        /// a new form containing the appointment details form
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        private void dgAppointments_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            canMeetAndGreetSchedule.Visibility = Visibility.Hidden;
            canAppointmentDetails.Visibility = Visibility.Visible;
            _adoptionAppointment = (AdoptionAppointmentVM)dgAppointments.SelectedItem;
            populateTextBoxes();
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This private method displays all of the relevent AppointmentVM data in the
        /// respective text boxes.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// 
        /// </remarks>
        private void populateTextBoxes()
        {
            txtAppointmentID.Text = _adoptionAppointment.AppointmentID.ToString();
            txtAppointmentType.Text = _adoptionAppointment.AppointmentTypeID;
            dpAppointmentDate.SelectedDate = _adoptionAppointment.AppointmentDateTime;
            txtAppointmentTime.Text = _adoptionAppointment.AppointmentDateTime.ToShortTimeString();
            txtDecision.Text = _adoptionAppointment.Decision;
            txtLocationName.Text = _adoptionAppointment.LocationName;
            txtLocationAddress1.Text = _adoptionAppointment.LocationAddress1;
            txtLocationAddress2.Text = _adoptionAppointment.LocationAddress2;
            txtLocationCity.Text = _adoptionAppointment.LocationCity;
            txtLocationState.Text = _adoptionAppointment.LocationState;
            txtLocationZip.Text = _adoptionAppointment.LocationZip;
            txtCustomerFirstName.Text = _adoptionAppointment.UserFirstName;
            txtCustomerLastName.Text = _adoptionAppointment.UserLastName;
            txtCustomerPhoneNumber.Text = _adoptionAppointment.UserPhoneNumber;
            txtCustomerEmail.Text = _adoptionAppointment.UserEmail;
            txtAnimalName.Text = _adoptionAppointment.AnimalName;
            txtAnimalDob.Text = _adoptionAppointment.AnimalDob.ToShortDateString();
            txtAnimalSpecies.Text = _adoptionAppointment.AnimalSpeciesID;
            txtAnimalBreed.Text = _adoptionAppointment.AnimalBreed;

            if (txtDecision.Text == "")
            {
                txtDecision.Text = "Undecided";
            }
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This method is fired when the back button is clicked. It causes this form to be closed.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// 
        /// </remarks>
        private void btnBack_Click(object sender, RoutedEventArgs e)
        {
            canAppointmentDetails.Visibility = Visibility.Hidden;
            canMeetAndGreetSchedule.Visibility = Visibility.Visible;
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/17/2020
        /// CHECKED BY: Thomas Dupuy
        /// 
        /// This method is fired when the page is loaded. It resets the view of the Meet and greet view.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// 
        /// </remarks>
        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            canAppointmentDetails.Visibility = Visibility.Hidden;
            canMeetAndGreetSchedule.Visibility = Visibility.Visible;
        }
    }
}
