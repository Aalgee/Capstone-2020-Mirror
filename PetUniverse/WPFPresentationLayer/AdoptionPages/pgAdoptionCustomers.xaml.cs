using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using LogicLayer;
using LogicLayerInterfaces;
using DataTransferObjects;

namespace WPFPresentationLayer.AdoptionPages
{
    /// <summary>
    /// NAME: Austin Gee
    /// DATE: 2/6/2020
    /// CHECKED BY: Mohamed Elamin, 02/07/2020
    /// 
    /// This form displays a list of Adoption customers that can be used to access a
    /// customers profile.
    /// </summary>
    /// <remarks>
    /// UPDATED BY: NA
    /// UPDATE DATE: NA
    /// WHAT WAS CHANGED: NA
    /// 
    /// </remarks>
    public partial class pgAdoptionCustomers : Page
    {
        IAdoptionCustomerManager _adoptionCustomerManager;
        AdoptionCustomerVM _adoptionCustomerVM;

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin, 02/07/2020
        /// 
        /// This is the standard no argument constructor
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        public pgAdoptionCustomers()
        {
            InitializeComponent();
            _adoptionCustomerManager = new AdoptionCustomerManager();
            canAdoptionCustomerProfile.Visibility = Visibility.Collapsed;
            canAdoptionCustomerProfiles.Visibility = Visibility.Visible;

            populateCustomerDataGrid();
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin, 02/07/2020
        /// 
        /// This helper method populates the Customer data grid with dat when the form is loaded.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        private void populateCustomerDataGrid()
        {
            dgCustomers.ItemsSource = _adoptionCustomerManager.RetrieveAdoptionCustomersByActive(true);
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin, 02/07/2020
        /// 
        /// This event handler fires when columns for the dgCustomers data grid are generated. It formats the columns and headers
        /// in such a way that is more human readable.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgCustomers_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgCustomers.Columns.RemoveAt(21);
            dgCustomers.Columns.RemoveAt(20);
            dgCustomers.Columns.RemoveAt(19);
            dgCustomers.Columns.RemoveAt(18);
            dgCustomers.Columns.RemoveAt(17);
            dgCustomers.Columns.RemoveAt(12);
            dgCustomers.Columns.RemoveAt(10);
            dgCustomers.Columns.RemoveAt(9);
            dgCustomers.Columns.RemoveAt(8);
            dgCustomers.Columns.RemoveAt(7);
            dgCustomers.Columns.RemoveAt(6);
            dgCustomers.Columns.RemoveAt(1);

            //dgCustomers.Columns.RemoveAt(6);
            //dgCustomers.Columns.RemoveAt(1);
            //dgCustomers.Columns.RemoveAt(0);
            //dgCustomers.Columns.RemoveAt(5);
            //dgCustomers.Columns.RemoveAt(1);

            dgCustomers.Columns.Move(6, 1);
            dgCustomers.Columns.Move(7, 2);
            dgCustomers.Columns.Move(9, 5);
            dgCustomers.Columns.Move(9, 6);
            dgCustomers.Columns.Move(9, 8);

            //dgCustomers.Columns.Move(6, 3);
            dgCustomers.Columns[0].Header = "Customer ID";
            dgCustomers.Columns[1].Header = "First Name";
            dgCustomers.Columns[2].Header = "Last Name";
            dgCustomers.Columns[3].Header = "Adoption Status";
            dgCustomers.Columns[4].Header = "Application Recieved On";
            dgCustomers.Columns[5].Header = "Email";
            dgCustomers.Columns[6].Header = "Phone Number";
            dgCustomers.Columns[7].Header = "Animal Name";
            dgCustomers.Columns[8].Header = "Animal Species";
            dgCustomers.Columns[9].Header = "Animal Breed";
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin, 02/07/2020
        /// 
        /// This event handler is fired when a dgCustomer data grid selection is double clicked. It then loads
        /// up the chosen customers profile window
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgCustomers_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            canAdoptionCustomerProfiles.Visibility = Visibility.Hidden;
            canAdoptionCustomerProfile.Visibility = Visibility.Visible;
            _adoptionCustomerVM = (AdoptionCustomerVM)dgCustomers.SelectedItem;
            populateTextFields();
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin
        /// 
        /// This helper method is used to fill in the various text boxes in this form
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        private void populateTextFields()
        {
            txtFirstName.Text = _adoptionCustomerVM.FirstName;
            txtLastName.Text = _adoptionCustomerVM.LastName;
            txtCity.Text = _adoptionCustomerVM.City;
            txtAdoptionApplicationID.Text = _adoptionCustomerVM.AdoptionApplicationID.ToString();
            txtAdoptionStatus.Text = _adoptionCustomerVM.CustomerAdoptionStatus;
            txtCustomerID.Text = _adoptionCustomerVM.CustomerID.ToString();
            txtEmail.Text = _adoptionCustomerVM.Email;
            txtPhoneNumber.Text = _adoptionCustomerVM.PhoneNumber;
            txtState.Text = _adoptionCustomerVM.State;
            txtZipcode.Text = _adoptionCustomerVM.ZipCode;
            dpApplicationRecieved.SelectedDate = _adoptionCustomerVM.AdoptionApplicationRecievedDate;
            txtAnimalID.Text = _adoptionCustomerVM.AnimalID.ToString();
            txtAnimalName.Text = _adoptionCustomerVM.AnimalName;
        }

        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: Mohamed Elamin
        /// 
        /// This is used as an alternate way in which to close this form without using the corner x.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            canAdoptionCustomerProfile.Visibility = Visibility.Hidden;
            canAdoptionCustomerProfiles.Visibility = Visibility.Visible;
        }


        /// <summary>
        /// NAME: Austin Gee
        /// DATE: 2/6/2020
        /// CHECKED BY: NA
        /// 
        /// This clears the tab when another tab is clicked.
        /// </summary>
        /// <remarks>
        /// UPDATED BY: NA
        /// UPDATE DATE: NA
        /// WHAT WAS CHANGED: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Page_Loaded(object sender, RoutedEventArgs e)
        {
            canAdoptionCustomerProfile.Visibility = Visibility.Hidden;
            canAdoptionCustomerProfiles.Visibility = Visibility.Visible;
        }
    }
}
