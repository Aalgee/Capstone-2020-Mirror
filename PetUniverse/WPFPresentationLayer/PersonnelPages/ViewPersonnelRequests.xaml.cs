using DataTransferObjects;
using LogicLayer;
using PresentationUtilityCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace WPFPresentationLayer.PersonnelPages
{
    /// <summary>
    /// Creator : Kaleb Bachert
    /// Created: 2/20/2020
    /// Approver: Zach Behrensmeyer
    /// 
    /// Interaction logic for ViewPersonnelRequests.xaml
    /// </summary>
    public partial class ViewPersonnelRequests : Page
    {
        IRequestManager _requestManager;
        PetUniverseUser _user;

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/20/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This is the default constructor
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>

        public ViewPersonnelRequests()
        {
            _requestManager = new RequestManager();
            _user = new PetUniverseUser();

            InitializeComponent();
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/20/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This is the detailed constructor
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>

        public ViewPersonnelRequests(PetUniverseUser user)
        {
            _requestManager = new RequestManager();
            _user = user;

            InitializeComponent();
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This method is called when the search bar in personnel Requests, gets focus
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        //private void txtSearchRequests_GotFocus(object sender, RoutedEventArgs e)
        //{
        //    ((TextBox)sender).Text = string.Empty;
        //    ((TextBox)sender).Foreground = new SolidColorBrush(Colors.Black);
        //    ((TextBox)sender).FontStyle = FontStyles.Normal;

        //    //Removes this event handler after one call. Won't keep deleting text.
        //    ((TextBox)sender).GotFocus -= txtSearchRequests_GotFocus;
        //}

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This method is called when the Open Requests DataGrid is done generating Columns
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgOpenRequests_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgOpenRequests.Columns.RemoveAt(0);
            dgOpenRequests.Columns.RemoveAt(6);
            dgOpenRequests.Columns[0].Header = "Request Type";
            dgOpenRequests.Columns[1].Header = "Effective Start Date";
            dgOpenRequests.Columns[2].Header = "Effective End Date";
            dgOpenRequests.Columns[3].Header = "Approval Date";
            dgOpenRequests.Columns[4].Header = "Requesting Employee";
            dgOpenRequests.Columns[5].Header = "Approved By Employee";
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This method is called when the Requests Tab in Personnel, is loaded
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgOpenRequests_Loaded(object sender, RoutedEventArgs e)
        {
            populateRequestList();
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This method is called to update the dgOpenRequests ItensSource
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void populateRequestList()
        {
            dgOpenRequests.ItemsSource = _requestManager.RetrieveAllRequests();
        }


        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/16/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// This method is called when btnRequestDetails is clicked
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRequestDetails_Click(object sender, RoutedEventArgs e)
        {
            Window window = null;
            RequestVM selectedRequest = (RequestVM)dgOpenRequests.SelectedItem;

            if (selectedRequest != null)
            {
                switch (selectedRequest.RequestTypeID)
                {
                    case "Time Off":
                        canPersonnelRequests.Visibility = Visibility.Hidden;
                        canTimeOffRequestDetails.Visibility = Visibility.Visible;
                        selectDateRange(selectedRequest);
                        setTimeOffRequestTextFields(selectedRequest);
                        break;
                    default:
                        WPFErrorHandler.ErrorMessage("REQUEST TYPE NOT IMPLEMENTED!", "Implementation");
                        break;
                }
            }
            else
            {
                MessageBox.Show("Make a Selection First!");
            }

            if (window != null)
            {
                if (window.ShowDialog() == true)
                {
                    populateRequestList();
                }
            }
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/17/2020
        /// Approver: Zach Behrensmeyer
        ///  
        ///  This button simply closes the window.
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTimeOffCancel_Click(object sender, RoutedEventArgs e)
        {
            canTimeOffRequestDetails.Visibility = Visibility.Hidden;
            canPersonnelRequests.Visibility = Visibility.Visible;
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/19/2020
        /// Approver: Zach Behrensmeyer
        ///  
        ///  This method is called to select the dates mentioned in the request
        ///  on the calendar control
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="request"></param>

        private void selectDateRange(RequestVM request)
        {
            calTimeOffDateRange.SelectedDates.Clear();

            DateTime startDate = Convert.ToDateTime(request.EffectiveStart);
            if (request.EffectiveEnd != null && request.EffectiveEnd != "")
            {
                DateTime endDate = Convert.ToDateTime(request.EffectiveEnd);

                calTimeOffDateRange.SelectedDates.AddRange(startDate, endDate);
            }
            else
            {
                calTimeOffDateRange.SelectedDate = startDate;
            }
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/19/2020
        /// Approver: Zach Behrensmeyer
        ///  
        ///  This method is called to fill in the text fields for
        ///  Time Off Request details
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="request"></param>

        private void setTimeOffRequestTextFields(RequestVM request)
        {
            //Gets the Date only from EffectiveStart
            txtTimeOffStartDate.Text = Convert.ToDateTime(request.EffectiveStart).ToString("d");

            //Gets the Date only from EffectiveEnd
            if (request.EffectiveEnd != null && request.EffectiveEnd != "")
            {
                txtTimeOffEndDate.Text = Convert.ToDateTime(request.EffectiveEnd).ToString("d");
            }

            //Gets the Time only from EffectiveStart
            txtTimeOffStartTime.Text = Convert.ToDateTime(request.EffectiveStart).TimeOfDay.ToString();

            //Gets the Time only from EffectiveEnd
            txtTimeOffEndTime.Text = Convert.ToDateTime(request.EffectiveEnd).TimeOfDay.ToString();
        }

        /// <summary>
        /// Creator : Kaleb Bachert
        /// Created: 2/19/2020
        /// Approver: Zach Behrensmeyer
        ///  
        ///  This button will pop up a confirmation of approval, and approve the request
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTimeOffApprove_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult confirmApproval = MessageBox.Show("Are you sure you want to approve this request?",
                                      "Confirm Approval?", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (confirmApproval == MessageBoxResult.Yes)
            {
                int requestsAffected = _requestManager.ApproveRequest(((RequestVM)dgOpenRequests.SelectedItem).RequestID, _user.PUUserID);

                if (1 == requestsAffected)
                {
                    WPFErrorHandler.SuccessMessage("Successfully Approved Request!");
                }
                else if (1 < requestsAffected)
                {
                    WPFErrorHandler.ErrorMessage("MULTIPLE REQUESTS AFFECTED! ALERT SYSTEM ADMINISTRATOR!", "Database");
                }
                else if (0 == requestsAffected)
                {
                    WPFErrorHandler.ErrorMessage("The request was either already approved, or could not be found!", "Request");
                }

                //Return to requests page with data refreshed
                canTimeOffRequestDetails.Visibility = Visibility.Hidden;
                canPersonnelRequests.Visibility = Visibility.Visible;
                populateRequestList();
            }
        }
    }
}
