using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WPFPresentationLayer.PersonnelPages
{
    /// <summary>
    /// Interaction logic for ViewAllRoles.xaml
    /// </summary>
    public partial class ViewAllRoles : Page
    {


        private IERoleManager _ERoleManager = new ERoleManager();
        bool _viewMode = false;
        bool _addMode = false;
        private ERole _eRole = null;
        private IERoleManager _eRoleManager = new ERoleManager();
        public ViewAllRoles()
        {
            InitializeComponent();
            RefreshERole();
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Populate the role list upon selecting view roles tab
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private void RefreshERole()
        {

            try
            {
                dgERoleList.ItemsSource = _eRoleManager.RetrieveERolesByActive();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n" + ex.InnerException.Message);
            }
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Rename column names
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DgERoleList_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgERoleList.Columns[0].Header = "ERole";
            dgERoleList.Columns[1].Header = "EDepartment";
            dgERoleList.Columns[2].Header = "Description";

        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Open a role for view or editing
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnOpenERole_Click(object sender, RoutedEventArgs e)
        {
            if (dgERoleList.SelectedItem != null)
            {
                ERole selectedERole = (ERole)dgERoleList.SelectedItem;
                _eRole = selectedERole;
                gridEditERoles.Visibility = Visibility.Visible;
                _addMode = false;
                updateMode();
            }
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method to get view ready for update
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void updateMode()
        {
            chkActive.IsEnabled = true;
            btnBackRole.Visibility = Visibility.Visible;
            btnNextRole.Visibility = Visibility.Visible;
            populateERoleText();
            disableViewERoles();
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method to get view ready for create
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void createMode()
        {
            depopulateERoleText();
            chkActive.IsChecked = true;
            chkActive.IsEnabled = false;
            _eRole = null;
            btnBackRole.Visibility = Visibility.Hidden;
            btnNextRole.Visibility = Visibility.Hidden;
            disableViewERoles();
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method disable view all
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void disableViewERoles()
        {
            btnAddERole.Visibility = Visibility.Hidden;
            btnDeleteERole.Visibility = Visibility.Hidden;
            btnOpenRole.Visibility = Visibility.Hidden;
            dgERoleList.Visibility = Visibility.Hidden;
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method to enable view all
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void enableViewERoles()
        {
            btnAddERole.Visibility = Visibility.Visible;
            btnDeleteERole.Visibility = Visibility.Visible;
            btnOpenRole.Visibility = Visibility.Visible;
            dgERoleList.Visibility = Visibility.Visible;
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Add a new Role
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnAddERole_Click(object sender, RoutedEventArgs e)
        {
            _addMode = true;
            createMode();
            gridEditERoles.Visibility = Visibility.Visible;
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Delete a role
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnDeleteERole_Click(object sender, RoutedEventArgs e)
        {
            if (dgERoleList.SelectedItem != null)
            {
                ERole selectedERole = (ERole)dgERoleList.SelectedItem;
                var deleteERole = MessageBox.Show("Are you sure you want to delete " + selectedERole.ERoleID, "Confirm Delete", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (deleteERole == MessageBoxResult.Yes)
                {
                    try
                    {
                        _eRoleManager.DeleteERole(selectedERole.ERoleID);
                        RefreshERole();
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message + "\n\n" + ex.InnerException.Message);
                    }
                }
            }
        }

        /*****************         Edit/View ERole            ******************/


        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Save information into DB
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnSave_Click(object sender, RoutedEventArgs e)
        {
            var deleteERole = MessageBox.Show("Is the entered info coreect", "", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (deleteERole == MessageBoxResult.Yes)
            {
                string eRoleID = txtERoleID.Text;
                string EDepartmentID = txtEDepartmentID.Text;
                string description = txtDescription.Text;
                if (!eRoleID.checkERoleID())
                {
                    MessageBox.Show("You must a enter a vaild Role ID");
                    txtERoleID.Focus();
                    return;
                }
                if (!EDepartmentID.checkEDepartmentID())
                {
                    MessageBox.Show("You must a enter a vaild EDepartment ID");
                    txtEDepartmentID.Focus();
                    return;
                }
                if (!description.checkDescription())
                {
                    MessageBox.Show("You must a enter a vaild Description");
                    txtEDepartmentID.Focus();
                    return;
                }

                ERole newERole = new ERole()
                {
                    ERoleID = txtERoleID.Text,
                    Description = txtDescription.Text,
                    EDepartmentID = txtEDepartmentID.Text

                };

                if (_addMode == true)
                {
                    try
                    {
                        if (_ERoleManager.AddERole(newERole))
                        {
                            RefreshERole();
                            gridEditERoles.Visibility = Visibility.Hidden;
                            enableViewERoles();
                        }
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.InnerException.Message, ex.Message + "\n\n");
                    }
                }
                else if (_addMode == false)
                {
                    try
                    {
                        if (_ERoleManager.EditERole(_eRole, newERole))
                        {
                            RefreshERole();
                            gridEditERoles.Visibility = Visibility.Hidden;
                            enableViewERoles();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.InnerException.Message, ex.Message + "\n\n");
                    }
                }
            }
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Cancel frm and do not save elements
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnCancel_Click(object sender, RoutedEventArgs e)
        {
            gridEditERoles.Visibility = Visibility.Hidden;
            enableViewERoles();
        }
        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Activate or deactivate a role
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ChkActive_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                {
                    if (!(bool)chkActive.IsChecked)
                    {
                        _eRoleManager.DeactivateERole(_eRole.ERoleID);
                        RefreshERole();

                    }
                    else if ((bool)chkActive.IsChecked)
                    {
                        _eRoleManager.ActivateERole(_eRole.ERoleID);
                        RefreshERole();
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.InnerException.Message, ex.Message + "\n\n");
            }
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Get next role in database
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnNextERole_Click(object sender, RoutedEventArgs e)
        {
            List<ERole> eRoles = null;
            //get current eRole, search, by comparing all eRoles in a array via _eRoleManager, then get previous. Ask user if they are sure as all changes will go unsaved
            try
            {
                eRoles = _eRoleManager.RetrieveAllERoles();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n", ex.InnerException.Message);
            }
            ERole eRole = new ERole();
            eRole.ERoleID = txtERoleID.Text;
            eRole.EDepartmentID = txtEDepartmentID.Text;
            eRole.Description = txtDescription.Text;
            eRole.Active = (bool)chkActive.IsChecked;
            int eRoleIndex = 0;
            //Find current eRole
            eRoleIndex = findMatchingID(eRoles, eRoleIndex);
            eRoleIndex++;
            //Make sure eRole is unchanged, else ask user if sure
            if (!_eRole.Description.Equals(eRole.Description) || !_eRole.EDepartmentID.Equals(eRole.EDepartmentID))
            {
                var goForwardERole = MessageBox.Show("You will lose all unsaved progress", "Are you sure?", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (goForwardERole == MessageBoxResult.Yes)
                {
                    //Check if previous eRole is null
                    if (eRoleIndex.checkERoleIndex(eRoles))
                    {
                        //If null, go to first entry
                        _eRole = eRoles.First();
                        populateERoleText();
                    }
                    else
                    {
                        _eRole = eRoles.ElementAt(eRoleIndex);
                        populateERoleText();
                    }
                }
                else
                {
                    return;
                }
            }
            else
            {
                //Check if previous eRole is null
                if (eRoleIndex.checkERoleIndex(eRoles))
                {
                    //If null, go to last entry
                    _eRole = eRoles.First();
                    populateERoleText();
                }
                else
                {
                    _eRole = eRoles.ElementAt(eRoleIndex);
                    populateERoleText();
                }

            }
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Get previous role in database
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnBackERole_Click(object sender, RoutedEventArgs e)
        {

            List<ERole> eRoles = null;
            //get current eRole, search, by comparing all eRoles in a array via _eRoleManager, then get previous. Ask user if they are sure as all changes will go unsaved
            try
            {
                eRoles = _eRoleManager.RetrieveAllERoles();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n", ex.InnerException.Message);
            }
            ERole eRole = new ERole();
            eRole.ERoleID = txtERoleID.Text;
            eRole.EDepartmentID = txtEDepartmentID.Text;
            eRole.Description = txtDescription.Text;
            eRole.Active = (bool)chkActive.IsChecked;
            int eRoleIndex = 0;
            //Find current eRole
            eRoleIndex = findMatchingID(eRoles, eRoleIndex);
            eRoleIndex--;
            //Make sure eRole is unchanged, else ask user if sure
            if (!_eRole.Description.Equals(eRole.Description) || !_eRole.EDepartmentID.Equals(eRole.EDepartmentID))
            {
                var goBackERole = MessageBox.Show("You will lose all unsaved progress", "Are you sure?", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (goBackERole == MessageBoxResult.Yes)
                {
                    //Check if previous eRole is null
                    if (eRoleIndex.checkERoleIndex(eRoles))
                    {
                        //If null, go to last entry
                        _eRole = eRoles.Last();
                        populateERoleText();
                    }
                    else
                    {
                        _eRole = eRoles.ElementAt(eRoleIndex);
                        populateERoleText();
                    }
                }
                else
                {
                    return;
                }
            }
            else
            {
                //Check if previous eRole is null
                if (eRoleIndex.checkERoleIndex(eRoles))
                {
                    //If null, go to last entry
                    _eRole = eRoles.Last();
                    populateERoleText();
                }
                else
                {
                    _eRole = eRoles.ElementAt(eRoleIndex);
                    populateERoleText();
                }

            }
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Find matching ID
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        /// <param name="eRoles"></param>
        /// <param name="eRoleIndex"></param>
        /// <returns></returns>
        private int findMatchingID(List<ERole> eRoles, int eRoleIndex)
        {
            foreach (var r in eRoles)
            {
                if (r.ERoleID.checkStringIsEqual(txtERoleID.Text))
                {
                    eRoleIndex = eRoles.IndexOf(r);
                    break;
                }
            }
            return eRoleIndex;
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method to repopulate input fields to match _eRole object
        /// </summary>
        ///
        /// <remarks>
        /// Updater 
        /// Updated:
        /// Update: 
        /// </remarks>
        private void populateERoleText()
        {
            txtERoleID.Text = _eRole.ERoleID;
            txtDescription.Text = _eRole.Description;
            txtEDepartmentID.Text = _eRole.EDepartmentID;
            chkActive.IsChecked = _eRole.Active;
        }

        /// <summary>
        /// Creator: Chase Schulte
        /// Created: 02/13/2020
        /// Approver: Kaleb Bachert
        /// 
        /// Helper method to un-populate input fields to match _eRole object
        /// </summary>
        ///
        /// <remarks>
        /// Updater:
        /// Updated:
        /// Update: 
        /// </remarks>
        private void depopulateERoleText()
        {
            txtERoleID.Text = "";
            txtDescription.Text = "";
            txtEDepartmentID.Text = "";
        }

    }
}
