using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WPFPresentationLayer.SystemAdminPages
{
    /// <summary>
    /// Creator: Zach Behrensmeyer
    /// Created: 2/20/2020
    /// Approver: Michael Thompson
    /// 
    /// This class controls UserControls page
    /// 
    /// </summary>
    public partial class UserControls : Page
    {
        private IERoleManager _eRoleManager;
        private IPetUniverseUserERolesManager _petUniverseUserERolesManager;
        private PetUniverseUser _petUniverseUser;
        private IUserManager _userManager;

        /// <summary>
        /// Creator: Zach Behrensmeyer
        /// Created: 2/20/2020
        /// Approver: Michael Thompson
        /// 
        /// This is a constructor for the UserControls Page
        /// 
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// 
        /// </remarks>
        /// </summary>
        public UserControls()
        {
            _userManager = new UserManager();
            InitializeComponent();
        }

        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/14/2020
        /// Approver: Jordan Lindo
        /// 
        /// Method of general Error handling.
        /// </summary>
        /// <remarks>
        /// Updater: Chase Schulte
        /// Updated: 03/03/2020
        /// Update: Removes all inherited ERole fields
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgUserList_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgUserList.Columns.RemoveAt(15);
            dgUserList.Columns.RemoveAt(14);
            dgUserList.Columns.RemoveAt(13);
            dgUserList.Columns.RemoveAt(12);
            dgUserList.Columns.RemoveAt(6);
            dgUserList.Columns.RemoveAt(5);
            dgUserList.Columns[0].Header = "ID";
            dgUserList.Columns[1].Header = "First Name";
            dgUserList.Columns[2].Header = "Last Name";
            dgUserList.Columns[3].Header = "Phone Number";
            dgUserList.Columns[4].Header = "Email";
            dgUserList.Columns[5].Header = "Address Line 1";
            dgUserList.Columns[6].Header = "Address Line 2";
            dgUserList.Columns[7].Header = "City";
            dgUserList.Columns[8].Header = "State";
            dgUserList.Columns[9].Header = "ZipCode";

            // this fill all availalbe space with available columns
            foreach (var column in this.dgUserList.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }

            dgUserList.Columns[0].Width = 60;
            dgUserList.Columns[3].Width = 95;
            dgUserList.Columns[8].Width = 40;
            dgUserList.Columns[9].Width = 60;
        }

        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// When dgUserList is loaded. Adds items into dgUserList.
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgUserList_Loaded(object sender, RoutedEventArgs e)
        {
            RefreshDgUserList();
        }

        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/14/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// Adds items into dgUserList.
        /// </summary>
        /// <remarks>
        /// Updater: NA
        /// Updated: NA
        /// Update: NA
        /// </remarks>
        private void RefreshDgUserList()
        {
            try
            {
                dgUserList.ItemsSource = _userManager.RetrieveAllActivePetUniverseUsers();
            }
            catch (Exception ex)
            {
                LogicLayerErrorHandler.DataLoadErrorMessage(ex.Message, ex.InnerException.Message);
            }

        }

        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/20/2020
        /// Approver: Jordan Lindo
        /// 
        /// Hides dgUserList and shows new canvas for creating users. Also adds enum values to cmbState items source
        /// </summary>
        /// <remarks>
        /// Updater: Chase Schulte
        /// Updated: 03/01/2020
        /// Update: Added disability for "btnViewUserRole"
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCreateUser_Click(object sender, RoutedEventArgs e)
        {
            canUserView.Visibility = Visibility.Hidden;
            canAddUser.Visibility = Visibility.Visible;
            btnViewUserRoles.IsEnabled = false;
            foreach (var state in Enum.GetValues(typeof(States.StatesAb)))
            {
                cmbState.Items.Add(state);
            }
        }


        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/10/2020
        /// Approver: Zach Behrensmeyer
        /// 
        /// Create a new user by clicking save
        /// </summary>
        /// <remarks>
        /// Updater: Steven Cardona
        /// Updated: 03/01/2020
        /// Update: Added Address validation checks
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveUser_Click(object sender, RoutedEventArgs e)
        {
            bool isCreated = false;

            PetUniverseUser newUser = new PetUniverseUser();

            // Validate First Name
            if (!txtFirstName.Text.IsValidFirstName())
            {
                "First Name cannot be blank".ErrorMessage("Validation");
                //WPFErrorHandler.ErrorMessage("First name cannot be blank", "Validation");
                txtFirstName.Text = "";
                txtFirstName.Focus();
                return;
            }
            else
            {
                newUser.FirstName = txtFirstName.Text;
            }

            // Validate Last Name
            if (!txtLastName.Text.IsValidLastName())
            {
                WPFErrorHandler.ErrorMessage("Last name cannot be blank", "Validation");
                txtLastName.Text = "";
                txtLastName.Focus();
                return;
            }
            else
            {
                newUser.LastName = txtLastName.Text;
            }

            // Validate Email 
            if (!txtEmail.Text.IsValidEmail())
            {
                WPFErrorHandler.ErrorMessage("Invalid email address", "Validation");
                txtEmail.Text = "";
                txtEmail.Focus();
                return;
            }
            else
            {
                newUser.Email = txtEmail.Text;
            }

            // Validate Phone Number
            try
            {
                if (!txtPhoneNumber.Text.IsValidPhoneNumber())
                {
                    WPFErrorHandler.ErrorMessage("Invalid Phone Number", "Validation");
                    txtPhoneNumber.Text = "";
                    txtPhoneNumber.Focus();
                    return;
                }
                else
                {
                    newUser.PhoneNumber = txtPhoneNumber.Text;
                }
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message, "Validation");
                txtPhoneNumber.Text = "";
                txtPhoneNumber.Focus();
                return;
            }

            // Validate City
            if (!txtCity.Text.IsValidCity())
            {
                string message = string.IsNullOrEmpty(txtCity.Text) ? "City cannot be blank" : "City must be less than 20 characters long";
                WPFErrorHandler.ErrorMessage(message, "Validation");
                txtCity.Text = "";
                txtCity.Focus();
                return;
            }
            else
            {
                newUser.City = txtCity.Text;
            }

            // Validate State
            if (cmbState.SelectedItem == null || !cmbState.SelectedItem.ToString().IsValidState())
            {
                WPFErrorHandler.ErrorMessage("Please select a state", "Validation");
                cmbState.Focus();
                return;
            }
            else
            {
                newUser.State = cmbState.SelectedItem.ToString();
            }

            // Validate Zipcode
            try
            {
                if (!txtZipcode.Text.IsValidState())
                {
                    WPFErrorHandler.ErrorMessage("Invalid Zipcode", "Validation");
                    txtZipcode.Text = "";
                    txtZipcode.Focus();
                    return;
                }
                else
                {
                    newUser.ZipCode = txtZipcode.Text;
                }
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message, "Validation");
            }

            try
            {
                if (!txtAddress1.Text.IsValidAddress1())
                {
                    WPFErrorHandler.ErrorMessage("Invalid Address Line 1", "Validation");
                    txtAddress1.Text = "";
                    txtAddress1.Focus();
                    return;
                }
                else
                {
                    newUser.Address1 = txtAddress1.Text;
                }
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message, "Validation");
            }

            try
            {
                if (!txtAddress1.Text.IsValidAddress2())
                {
                    WPFErrorHandler.ErrorMessage("Invalid Address Line 2", "Validation");
                    txtAddress2.Text = "";
                    txtAddress2.Focus();
                    return;
                }
                else
                {
                    if (!string.IsNullOrEmpty(txtAddress2.Text))
                    {
                        newUser.Address2 = txtAddress2.Text;
                    }
                    else
                    {
                        newUser.Address2 = null;
                    }
                }
            }
            catch (Exception ex)
            {
                WPFErrorHandler.ErrorMessage(ex.Message, "Validation");
            }

            try
            {
                isCreated = _userManager.CreateNewUser(newUser);
                if (isCreated)
                {
                    WPFErrorHandler.SuccessMessage("Create new user was successful");
                }
                canAddUser.Visibility = Visibility.Hidden;
                canUserView.Visibility = Visibility.Visible;

                RefreshDgUserList();
            }
            catch (Exception ex)
            {
                LogicLayerErrorHandler.UserCreationErrorMessage(ex.Message, ex.InnerException.Message);
            }
        }

        /// <summary>
        /// Creator: Steven Cardona
        /// Created: 02/15/2020
        /// Approver: Jordan Lindo
        /// 
        /// Hides canNewUsers and shows canViewUsers.
        /// </summary>
        /// <remarks>
        /// Updater: Chase Schulte
        /// Updated: 03/01/2020
        /// Update: Added enability for "btnViewUserRole"
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnBack_Click(object sender, RoutedEventArgs e)
        {
            canAddUser.Visibility = Visibility.Hidden;
            canUserView.Visibility = Visibility.Visible;
            canViewUserERoles.Visibility = Visibility.Hidden;
            btnViewUserRoles.IsEnabled = true;
            btnCreateUser.IsEnabled = true;
            RefreshDgUserList();
        }
        /************************************ View User's ERole ********************************************/
        /// <summary>
        /// Creator: Chase Schutle
        /// Created: 03/01/2020
        /// Approver: Jordan Lindo
        /// 
        /// Allows a user to view a specific user's Eroles
        /// </summary>
        /// <remarks>
        /// Updater:
        /// Updated:
        /// Update:
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnViewUserRoles_Click(object sender, RoutedEventArgs e)
        {
            if (dgUserList.SelectedItem != null)
            {
                try
                {
                    //Prepare canvas
                    PetUniverseHome petUniverseHome = new PetUniverseHome();
                    canUserView.Visibility = Visibility.Hidden;
                    canAddUser.Visibility = Visibility.Hidden;
                    canViewUserERoles.Visibility = Visibility.Visible;
                    btnCreateUser.IsEnabled = false;
                    //Prepare canvas functionality
                    _eRoleManager = new ERoleManager();
                    _petUniverseUserERolesManager = new PetUniverseUserERolesManager();
                    _petUniverseUser = (PetUniverseUser)dgUserList.SelectedItem;
                    refreshListBox();
                    lblUserID.Content = _petUniverseUser.PUUserID.ToString();
                }
                catch (Exception ex)
                {
                    WPFErrorHandler.ErrorMessage(ex.Message);
                }
            }
            else
            {
                WPFErrorHandler.ErrorMessage("Please select a valid user");
            }
        }
        /// <summary>
        /// Creator: Chase Schutle
        /// Created: 03/01/2020
        /// Approver: Jordan Lindo
        /// 
        /// Allows a user to assign a specific user's Eroles
        /// </summary>
        /// <remarks>
        /// Updater:
        /// Updated:
        /// Update:
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnAssign_Click(object sender, RoutedEventArgs e)
        {
            if (lbUnassignedERoles.SelectedItems.Count == 0)
            {
                WPFErrorHandler.ErrorMessage("Please selecte an unassigned role");
                return;
            }
            try
            {
                if (_petUniverseUserERolesManager.AddPetUniverseUserERole(_petUniverseUser.PUUserID, lbUnassignedERoles.SelectedItem.ToString()))
                {
                    refreshListBox();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n", ex.InnerException.Message);
            }
        }
        /// <summary>
        /// Creator: Chase Schutle
        /// Created: 03/01/2020
        /// Approver: Jordan Lindo
        /// 
        /// Allows a user to unassign a specific user's Eroles
        /// </summary>
        /// <remarks>
        /// Updater:
        /// Updated:
        /// Update:
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnUnassign_Click(object sender, RoutedEventArgs e)
        {
            if (lbAssignedERoles.SelectedItems.Count == 0)
            {
                WPFErrorHandler.ErrorMessage("Please selecte an assigned role");
                return;
            }
            try
            {
                if (_petUniverseUserERolesManager.DeletePetUniverseUserERole(_petUniverseUser.PUUserID, lbAssignedERoles.SelectedItem.ToString()))
                {
                    refreshListBox();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n", ex.InnerException.Message);
            }
        }
        /// <summary>
        /// Creator: Chase Schutle
        /// Created: 03/01/2020
        /// Approver: Jordan Lindo
        /// 
        /// Helper method to refresh listboxes after any type of relateed to a user's ERoles update
        /// </summary>
        /// <remarks>
        /// Updater:
        /// Updated:
        /// Update:
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void refreshListBox()
        {
            try
            {
                var activeRole = _petUniverseUserERolesManager.RetrievePetUniverseUserERolesByPetUniverseUser(_petUniverseUser.PUUserID);
                lbAssignedERoles.ItemsSource = activeRole;
                List<string> roles = new List<string>();
                foreach (var item in _eRoleManager.RetrieveERolesByActive())
                {
                    roles.Add(item.ERoleID.ToString());
                }
                foreach (string role in activeRole)
                {
                    roles.Remove(role);
                }
                lbUnassignedERoles.ItemsSource = roles;
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message + "\n\n", ex.InnerException.Message);
            }
        }
    }
}
