using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DataTransferObjects;
using LogicLayer;
using LogicLayerInterfaces;
using PresentationUtilityCode;

namespace WPFPresentationLayer.InventoryPages.Items
{
    /// <summary>
    /// Creator: Brandyn T. Coverdill
    /// Created: 2020/02/22
    /// Approver: Dalton Reierson
    /// Approver:  Jesse Tomash
    ///
    /// Page class that handles viewing Inventory.
    /// </summary>
    public partial class ViewInventory : Page
    {

        private IItemManager _itemManager;
        private IItemCategoryManager _itemCategoryManager;

        public ViewInventory()
        {
            _itemManager = new ItemManager();
            _itemCategoryManager = new ItemCategoryManager();
            InitializeComponent();
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/02/23
        /// Approver: Dalton Reierson
        /// Approver:   Jesse Tomash
        ///
        /// Method that generates the columns for the view inventory datagrid.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: Brandyn T. Coverdill
        /// Updated: 2020/03/03
        /// Update: The Description field was blank, so I modified it to where it gives a description of the item.
        /// Approver: Dalton Reierson
        /// Updater Matt Deaton
        /// Updated: 2020-03-07 
        /// Update: Removed Column 3 to insure the Shelter Threshold didn't show up in Data Grid
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgViewInventory_AutoGeneratedColumns(object sender, EventArgs e)
        {

            dgViewInventory.Columns.RemoveAt(3);
            dgViewInventory.Columns[0].Header = "Item ID";
            dgViewInventory.Columns[1].Header = "Item Name";
            dgViewInventory.Columns[2].Header = "Item Quantity";
            dgViewInventory.Columns[3].Header = "Category";
            dgViewInventory.Columns[4].Header = "Description";
            dgViewInventory.Columns[6].Header = "Shelter Item";

            foreach (var column in this.dgViewInventory.Columns)
            {
                column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/02/23
        /// Approver: Dalton Reierson
        /// Approver:   Jesse Tomash
        ///
        /// When datagrid is loaded, add items to the datagrid.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgViewInventory_Loaded(object sender, RoutedEventArgs e)
        {
            dgViewInventory.ItemsSource = _itemManager.retrieveItems();
        }



        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/03/01
        /// Approver: Dalton Reierson
        /// Approver:  Jesse Tomash
        ///
        /// This Button shows the Add Item Screen.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAddItems_Click(object sender, RoutedEventArgs e)
        {
            this.NavigationService?.Navigate(new AddItems());
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/03/03
        /// Approver: Dalton Reierson
        /// Approver:  Jesse Tomash
        ///
        /// This click event opens the view item detail screen.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnViewItem_Click(object sender, RoutedEventArgs e)
        {
            Item item = (Item) dgViewInventory.SelectedItem;
            if (dgViewInventory.SelectedItem != null)
            {
                this.NavigationService?.Navigate(new ViewItemDetail(item));
            }
            else
            {
                "Please pick an item to view.".ErrorMessage();
            }
        }

        /// <summary>
        /// Creator: Dalton Reierson
        /// Created: 2020/03/13
        /// Approver: Brandyn T. Coverdill
        /// Approver: Jesee Tomash
        ///
        /// Click event for deactivate button
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDeactivateItem_Click(object sender, RoutedEventArgs e)
        {
            Item item = (Item)dgViewInventory.SelectedItem;
            if (dgViewInventory.SelectedItem != null)
            {
                _itemManager.deactivateItem(item);
                dgViewInventory.ItemsSource = _itemManager.retrieveItemsByActive(true);
            }
            else
            {
                "Please pick an item to view.".ErrorMessage();
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/02
        /// Approver: Jesse Tomash
        /// Approver:  Dalton Reierson
        /// 
        /// This method searches for items in item categories. If no text was selected,
        /// show the list of all the items.
        /// 
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSearchItem_Click(object sender, RoutedEventArgs e)
        {
            if (txtSearchItem.Text.Trim() == "")
            {
                dgViewInventory.ItemsSource = _itemManager.retrieveItems();
            }
            else
            {
                populateViewInventory();
            }
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/02
        /// Approver: Jesse Tomash
        /// Approver:  Dalton Reierson
        /// 
        /// This method populates the Datagrid by the Search Field. (Empty Shows all items).
        /// 
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        private void populateViewInventory()
        {
            // Save text from the text area.
            string searchedCategory = txtSearchItem.Text.ToString();
            // Get a list of all the items in the database.
            List<Item> itemsForSearch = new List<Item>();
            itemsForSearch = _itemManager.retrieveItems();
            // Get a list of all the categories in the database.
            List<ItemCategory> itemCategories = new List<ItemCategory>();
            itemCategories = _itemCategoryManager.listItemCategories();
            // Search though the categories which contain the text entered by the user, and put them in the data grid.
            dgViewInventory.ItemsSource = itemsForSearch.Where(r => r.ItemCategoryID.ToLower().Contains(searchedCategory.ToLower()));
        }

        /// <summary>
        /// Creator: Brandyn T. Coverdill
        /// Created: 2020/04/07
        /// Approver: Dalton Reierson
        /// Approver:  Jesse Tomash
        ///
        /// This Method goes to the Add Report Screen if an item is selected.
        /// </summary>
        ///
        /// <remarks>
        /// Updated By: 
        /// Updated: 
        /// Update:
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAddItemReport_Click(object sender, RoutedEventArgs e)
        {
            Item item = (Item)dgViewInventory.SelectedItem;
            if (dgViewInventory.SelectedItem != null)
            {
                this.NavigationService?.Navigate(new AddItemReport(item));
            }
            else
            {
                "Please pick an item to add a new report.".ErrorMessage();
            }
        }
    }
}
